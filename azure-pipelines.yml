name: $(Date:yyyyMMdd).$(Rev:rr)

pool:
  vmImage: ubuntu-latest

stages:
- stage: Test
  jobs:
  - job: Test
    steps:
      - task: UsePythonVersion@0
        inputs:
          versionSpec: '3.11'
      - script: pip install --upgrade --upgrade-strategy eager --editable .[dev]
        displayName: Install Application & Dependencies
      - script: |
          pytest --junitxml=junit/test-pytest-results.xml --cov-report=xml
        displayName: Run Tests
        continueOnError: true
      - script: |
          pytest --pylama -k 'pylama' --junit-xml=junit/test-pylama-results.xml -o addopts= tests/ pygrouper/
        displayName: Run Linter Tests
        continueOnError: true
      - script: |
          mypy -p pygrouper --junit-xml junit/test-mypy-results.xml
        displayName: Run MyPy Tests
        continueOnError: true
      - task: PublishTestResults@2
        condition: succeededOrFailed()
        inputs:
          testResultsFiles: '**/test-*-results.xml'
          failTaskOnFailedTests: true
      - task: PublishCodeCoverageResults@1
        condition: succeededOrFailed()
        inputs:
          codeCoverageTool: Cobertura
          summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.xml'
- stage: Build
  jobs:
  - job: Build
    steps:
      - task: UsePythonVersion@0
        inputs:
          versionSpec: '3.11'
      - task: TwineAuthenticate@1
        inputs:
          artifactFeed: 'ITAC-API/pygrouper'
      - ${{ if ne(variables['Build.SourceBranchName'], 'main') }}:
        - task: PythonScript@0
          inputs:
            scriptSource: inline
            script: |
              with open('pygrouper/__init__.py', 'r+') as f:
                content = f.read()

                for line in content.splitlines():
                  if line.startswith('__version__'):
                    delim = '"' if '"' in line else "'"
                    version = line.split(delim)[1]
                    break
                else:
                  raise RuntimeError("Unable to find version string.")

                print(f"found {version}")
                build_number = "$(Build.BuildNumber)".replace(".", "")
                new_version = f"{version}b{build_number}"
                print(f"new version: {new_version}")

                content = content.replace(version, new_version)
                f.seek(0)
                f.write(content)
                f.truncate()
          displayName: Set prerelease Version
      - script: |
          pip install build twine
          python -m build
          # cat $(PYPIRC_PATH)
          twine upload -r pygrouper --config-file $(PYPIRC_PATH) dist/* --verbose
          # pwd
          # ls -l
      # - publish: $(Pipeline.Workspace)/s/dist
